use std::fmt::Display;

use serde::Deserialize;
use thiserror::Error;

use super::Order;

#[derive(Debug, Clone, Deserialize)]
#[serde(rename_all = "camelCase")]
#[serde(untagged)]
pub enum OrderResponse {
    Orders {
        orders: Vec<Order>,
        cursor: Option<String>,
    },
    Error(OrderResponseError),
}

#[derive(Error, Debug, Clone, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct OrderResponseError {
    error_code: String,
    details: Option<String>,
}

impl TryFrom<OrderResponse> for Vec<Order> {
    type Error = OrderResponseError;

    fn try_from(value: OrderResponse) -> Result<Self, Self::Error> {
        match value {
            OrderResponse::Orders { orders, .. } => Ok(orders),
            OrderResponse::Error(err) => Err(err),
        }
    }
}

impl Display for OrderResponseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.details {
            Some(details) => write!(f, "{} ({})", self.error_code, details),
            None => write!(f, "{}", self.error_code),
        }
    }
}

#[cfg(test)]
mod tests {
    use super::OrderResponse;

    #[test]
    fn deserialize_response() {
        let data = r#"
        {
            "orders":[
               {
                  "outputs":[
                     {
                        "recipient":"0xb8bff65b2eeb60d6b37312ca0740a742d5e7f955",
                        "startAmount":"16226997558481172",
                        "endAmount":"16226997558481172",
                        "token":"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
                     }
                  ],
                  "encodedOrder":"0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000064b51b750000000000000000000000000000000000000000000000000000000064b51b75000000000000000000000000b507d4ef5ed7a01e37cb578f497329cdb3c273a50000000000000000000000000000000000000000000000000000000000002710000000000000000000000000111111111117dc0aa78b770fa6a738034120c3020000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000e80bf394d190851e215d5f67b67f8f5a52783f1e000000000000000000000000b8bff65b2eeb60d6b37312ca0740a742d5e7f95500000000000000000000000000000000000000000000000000000189635c5eac0000000000000000000000000000000000000000000000000000000064b51b75000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000039a65e493e91140000000000000000000000000000000000000000000000000039a65e493e9114000000000000000000000000b8bff65b2eeb60d6b37312ca0740a742d5e7f955",
                  "signature":"0x3dd85ac7743719d3d5275e21062ef8e2d98acbf8b5ceb1e0436c3dc70cb16d812de7df3c9e15dc56295d563b2c36798155dae63abb074df6aa3d6e1cdc6257c91b",
                  "input":{
                     "endAmount":"100000000000000000000",
                     "token":"0x111111111117dC0aa78b770fA6A738034120C302",
                     "startAmount":"100000000000000000000"
                  },
                  "orderStatus":"open",
                  "createdAt":1689589146,
                  "chainId":1,
                  "orderHash":"0xb057f8a9f0edcd0bd7156015232785cdc2c4d8a1e84be06169f4681d483b6709",
                  "type":"Dutch"
               },
               {
                  "outputs":[
                     {
                        "recipient":"0xb8bff65b2eeb60d6b37312ca0740a742d5e7f955",
                        "startAmount":"641732",
                        "endAmount":"641732",
                        "token":"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599"
                     }
                  ],
                  "encodedOrder":"0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000064b523ba0000000000000000000000000000000000000000000000000000000064b523ba000000000000000000000000b507d4ef5ed7a01e37cb578f497329cdb3c273a50000000000000000000000000000000000000000000000000000000000002710000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000214e8348c4f00000000000000000000000000000000000000000000000000000214e8348c4f00000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000e80bf394d190851e215d5f67b67f8f5a52783f1e000000000000000000000000b8bff65b2eeb60d6b37312ca0740a742d5e7f95500000000000000000000000000000000000000000000000000000189637cabd70000000000000000000000000000000000000000000000000000000064b523ba000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000000000000000000000000000000000000009cac4000000000000000000000000000000000000000000000000000000000009cac4000000000000000000000000b8bff65b2eeb60d6b37312ca0740a742d5e7f955",
                  "signature":"0x8a984da0ab70e1fca93ca8d2c7845d3cad76b437372840521855a4c2cc72d12f285ab3aeb51dd41845bfa73c7b89cb954d2d995dbb8162976a0d9acd6d0de33e1b",
                  "input":{
                     "endAmount":"150000000000000000",
                     "token":"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
                     "startAmount":"150000000000000000"
                  },
                  "orderStatus":"open",
                  "createdAt":1689591263,
                  "chainId":1,
                  "orderHash":"0x4568c1ed3ce7d3135c6f424fd9a7ad772e4d8a7eba67ca90265f6e2177dd7311",
                  "type":"Dutch"
               }
            ]
         }"#;

        // Parse the string of data into serde_json::Value.
        let response = serde_json::from_str::<OrderResponse>(data).unwrap();

        assert!(matches!(response, OrderResponse::Orders { .. }));
    }
}
